[menu __main __octoprint]
type: disabled

[gcode_macro HALT]
gcode:
#    RESPOND TYPE=command MSG=action:halt
    {action_call_remote_method("shutdown_machine")}

[gcode_macro LIGHTS_ON]
gcode:
    SET_PIN PIN=caselight VALUE=1

[gcode_macro LIGHTS_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0

[menu __main __control __nevermore]
type: input
name: Nevermore: {'ON' if menu.input else 'OFF'}
input: {printer['fan_generic nevermore'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED={menu.input}

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
enable: False
type: list
name: Lights

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S115
    M104 S250
    #SET_FAN_SPEED FAN=nevermore SPEED=1

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S250

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode:
    M140 S115
    SET_FAN_SPEED FAN=nevermore SPEED=1

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.05
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __control __cleannozzle]
type: command
name: Clean Nozzle
gcode:
    CLEAN_NOZZLE

[menu __main __ercf]
type: list
name: ERCF

[menu __main __ercf __home]
type: command
name: Home
gcode:
    ERCF_HOME

[menu __main __ercf __unlock]
type: command
name: Unlock
gcode: ERCF_UNLOCK

[menu __main __ercf __eject]
type: command
name: Eject
gcode:
    ERCF_EJECT

[menu __main __ercf __release]
type: command
name: Release All
gcode:
    _ERCF_SERVO_UP
    _ERCF_MOTORS_OFF

[menu __main __ercf __tool]
type: input
input: 0
input_min: 0
input_max: 8
input_step: 1
name: Select Tool: {menu.input|int}
gcode:
    T{menu.input|int}

[menu __main __halt]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Halt
gcode: HALT

[display_glyph chamber_heat]
data:
  ................
  ................
  .**************.
  .**************.
  .*............*.
  .*..*..*..*...*.
  .*...*..*..*..*.
  .*..*..*..*...*.
  .*.*..*..*....*.
  .*..*..*..*...*.
  .*...*..*..*..*.
  .*..*..*..*...*.
  .**************.
  .**************.
  ................
  ................

[display_data _default_16x4 chamber_status]
position: 3, 10
text: 
 ~chamber_heat~
 {printer['temperature_sensor chamber'].temperature|int}
 ~degrees~
